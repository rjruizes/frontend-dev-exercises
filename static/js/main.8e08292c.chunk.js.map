{"version":3,"sources":["components/BarChart.js","components/Collapsible.js","App.js","serviceWorker.js","index.js"],"names":["cleanDisplayKeys","keys","filterKey","indexOf","BarChart","props","chartRef","React","createRef","this","data","vals","myChart","Chart","current","getContext","type","labels","datasets","label","backgroundColor","map","val","Math","abs","options","tooltips","enabled","callbacks","title","tooltipItems","split","join","replace","item","datasetIndex","parseInt","value","legend","position","maintainAspectRatio","scales","xAxes","ticks","max","callback","toFixed","stacked","yAxes","beginAtZero","prevProps","update","className","ref","Component","Collapsible","scrollHeight","style","marginTop","maxHeight","filterOpen","children","parseAgeRange","rawData","min","d","age","marks","reduce","result","App","useState","setRawData","chartData","setChartData","groupBy","setGroupBy","minAge","setMinAge","maxAge","setMaxAge","ageMarks","setAgeMarks","ageFilter","setAgeFilter","sexFilter","setSexFilter","collapsibleOpen","setCollapsibleOpen","useEffect","csv","then","filteredData","filter","sex","results","rollup","filteredValues","totalCount","length","over_50k","sortedData","Array","from","sort","a","b","descending","display","justifyContent","paddingLeft","paddingRight","visibility","FilterFilled","Group","onChange","e","target","optionType","onClick","flexBasis","range","onAfterChange","defaultValue","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8e08292c.chunk.js","sourcesContent":["import React from 'react';\nimport Chart from 'chart.js'\n\n// Change long strings into arrays which will insert line breaks\nfunction cleanDisplayKeys(keys, filterKey) {\n  if(filterKey === 'education_level') {\n    keys[keys.indexOf('Professional school')] = ['Professional', 'School']\n    keys[keys.indexOf('Did not complete high school')] = ['Did not', 'complete', 'high school']\n  } else {\n    keys[keys.indexOf('Asian-Pac-Islander')] = ['Asian,', 'Pac. Islander']\n    keys[keys.indexOf('Amer-Indian-Eskimo')] = ['Amer. Indian,', 'Eskimo']\n  }\n  return keys\n}\n\nclass BarChart extends React.Component {\n  constructor(props) {\n    super(props);\n    this.chartRef = React.createRef();\n  }\n  componentDidMount() {\n    let { keys, vals } = this.props.data\n    keys = cleanDisplayKeys(keys, this.props.filterKey)\n    \n    this.myChart = new Chart(this.chartRef.current.getContext('2d'), {\n      type: 'horizontalBar',\n      data: {\n          labels: keys,\n          datasets: [{\n            label: 'Above $50k',\n            data: vals,\n            backgroundColor: 'rgba(31, 120, 180, 0.75)',\n          }, {\n            label: 'Below $50k',\n            data: vals.map(val => Math.abs(100 - val)),\n            backgroundColor: 'rgba(165, 206, 227, 0.75)',\n          }]\n      },\n      options: {\n        tooltips: {\n          enabled: true,\n          callbacks: {\n            title: (tooltipItems, data) => {\n              // We have to undo the work done by cleanDisplayKeys()\n              // The label is a string which was an array\n              // 1) replace the commas (which signifies an array delimiter) with spaces\n              // 2) replace double spaces (which signifies there was a comma) with slashes\n              return tooltipItems[0].label.split(',').join(' ').replace('  ', '/')\n            },\n            label: (item, data) => {\n              return data.datasets[item.datasetIndex].label + ': ' + parseInt(item.value)+'%'\n            },\n          }\n        },\n        legend: {\n          position: 'bottom',\n        },\n        maintainAspectRatio: false,\n        scales: {\n          xAxes: [{\n            ticks: {\n              max: 100,\n              callback: function (value) {\n                return (value / this.max * 100).toFixed(0) + '%'; // convert it to percentage\n              },\n            },\n            stacked: true\n          }],\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            },\n            stacked: true\n          }]\n        }\n      }\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    let { keys, vals } = this.props.data;\n    keys = cleanDisplayKeys(this.props.data.keys, this.props.filterKey)\n    this.myChart.data.labels = keys;\n    this.myChart.data.datasets[0].data = vals;\n    this.myChart.data.datasets[1].data = vals.map(val => Math.abs(100 - val));\n    this.myChart.update();\n  }\n  render() {\n    return (\n      <div className='chart-container'>\n        <canvas ref={this.chartRef} />\n      </div>\n    )\n  }\n}\n\nexport default BarChart","import React from 'react';\n\nclass Collapsible extends React.Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  render() {\n    const scrollHeight = this.ref.current ? this.ref.current.scrollHeight : 0\n    return (\n      <div\n        className='collapsible-content full-width'\n        ref={this.ref}\n        style={{\n          marginTop: 10,\n          maxHeight: this.props.filterOpen ? scrollHeight : 0\n        }}\n      >\n        <div className='wrapper' >\n          {this.props.children}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Collapsible","import React, { useState, useEffect } from 'react';\nimport { Button, Radio, Slider } from 'antd';\nimport { FilterFilled } from '@ant-design/icons';\nimport { csv } from 'd3-fetch';\nimport { rollup, descending, min, max } from 'd3-array';\nimport BarChart from './components/BarChart';\n\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport Collapsible from './components/Collapsible';\n\nconst parseAgeRange = (rawData) => ({\n    min: parseInt(min(rawData, d => d.age)),\n    max: parseInt(max(rawData, d => d.age)),\n    marks: [20, 30, 40, 50, 60, 70, 80, 90].reduce((result, item) => {\n      result[item] = item;\n      return result\n    }, {})  \n})\n\nfunction App() {\n  const [rawData, setRawData]     = useState(null)\n  const [chartData, setChartData] = useState(null)\n  const [groupBy, setGroupBy]     = useState('education_level')\n  const [minAge, setMinAge]       = useState(null)\n  const [maxAge, setMaxAge]       = useState(null)\n  const [ageMarks, setAgeMarks]   = useState(null)\n  const [ageFilter, setAgeFilter] = useState({ min: 17, max: 90 })\n  const [sexFilter, setSexFilter] = useState('Both')\n  const [collapsibleOpen, setCollapsibleOpen] = useState(false)\n\n  useEffect(() => {\n    csv(\"https://raw.githubusercontent.com/rjruizes/frontend-dev-exercises/master/census.csv\")\n      .then(data => {\n        const { min, max, marks } = parseAgeRange(data)\n        setMinAge(min)\n        setMaxAge(max)\n        setAgeMarks(marks)\n        setRawData(data)\n      })\n  }, [])\n\n  useEffect(() => {\n    if(!rawData) return\n    let filteredData = rawData\n    \n    if(sexFilter !== 'Both') filteredData = filteredData.filter(d => d.sex === sexFilter);\n    filteredData = filteredData.filter(d => d.age > ageFilter.min);\n    filteredData = filteredData.filter(d => d.age < ageFilter.max);\n\n    // rollup() returns a hashmap, {demographic: percentOver50k}\n    const results = rollup(filteredData, filteredValues => {\n      const totalCount = filteredValues.length\n      const over50kCount = filteredValues.filter(d => d.over_50k === \"1\").length\n      const percentOver50k = over50kCount / totalCount\n      return percentOver50k * 100\n    }, d => d[groupBy])\n  \n    // Change the hashmap to a sorted Array for displaying in the chart\n    const arr = Array.from(results)\n    const sortedData = arr.sort((a,b) => descending(a[1], b[1]))\n    const keys = sortedData.map(d=>d[0])\n    const vals = sortedData.map(d=>d[1])\n    \n    setChartData({ keys, vals })\n  }, [groupBy, ageFilter, sexFilter, rawData]);\n\n  return (\n    <div className=\"wrapper\">\n        <h3>Percentage of People Who Make Above and Below $50,000</h3>\n        <div style={{ display: 'flex', justifyContent: 'space-between', paddingLeft: 12, paddingRight: 12 }}>\n          <Button style={{ visibility: 'hidden' }}>\n            <FilterFilled />\n          </Button>\n          <Radio.Group\n            options={[\n              { label: 'By Education', value: 'education_level' },\n              { label: 'By Race', value: 'race' },\n            ]}\n            onChange={e => setGroupBy(e.target.value)}\n            value={groupBy}\n            optionType=\"button\"\n          />\n          <Button onClick={() => setCollapsibleOpen(!collapsibleOpen)} >\n            <FilterFilled />\n          </Button>\n        </div>\n        <Collapsible filterOpen={collapsibleOpen}>\n          <div className='filterbox'>\n              <div className='filterbox-item' style={{ flexBasis: 300 }}>\n                <b>Age</b>\n                { chartData ? <Slider range\n                    min={minAge}\n                    max={maxAge}\n                    onAfterChange={(val) => setAgeFilter({ min: val[0], max: val[1] })}\n                    defaultValue={[minAge, maxAge]}\n                    marks={ageMarks}\n                  /> : <div/> }\n              </div>\n              <div className='filterbox-item'>\n                <b style={{ display: 'block', marginBottom: 5 }}>Sex</b>\n                <Radio.Group\n                  optionType=\"button\"\n                  value={sexFilter}\n                  options={[\n                    { label: 'Both', value: 'Both' },\n                    { label: 'Male', value: 'Male' },\n                    { label: 'Female', value: 'Female' },\n                  ]}\n                  onChange={e => setSexFilter(e.target.value)}\n                />\n              </div>\n            </div>\n          </Collapsible>\n        { chartData ? <BarChart data={chartData} filterKey={groupBy} /> : <div/>}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}